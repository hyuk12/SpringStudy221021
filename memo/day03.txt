[의존성 주입(DI)을 통한 객체 간의 관계 구성]

** 의존

ⓐ →→→→→→→→→ⓑ
a객체에서 b객체를 직접 생성

** 의존성 주입

ⓐ →→→ ??? ↔↔↔ⓑ
a는 b가 필요하다는 신호만 보내주고, b객체를 주입하는 것은 외부에서 이루어짐

의존성 주입방식을 사용하기 위해서는 ???라는 존재가 필요하게 된다.
스프링 프레임워크에서는 ApplicationContext가 ???라는 존재이며, 
필요한 객체들을 생성하고, 필요한 객체들을 주입해주는 역활을 한다.
따라서 개발자들은 기존의 프로그래밍과 달리 객체와 객체를 분리해서 생성하고,
이러한 객체들을 엮는(wiring)작업의 형태로 개발하게 된다.

ApplicationContext가 관리하는 객체들을 '빈(Bean)'이라고 부르고,
빈과 빈 사이의 의존 관계를 처리하는 방식으로는 XML방식, 어노테이션 설정, JAVA 설정 방식을 이용할 수 있다.

[AOP의 지원]
	관점 지향 프로그래밍, 
	좋은 개발 환경에서는 개발자가 비지니스 로직에만 집중할 수 있게 한다.
	스프링 프레임워크는 반복적인 코드를 제거해줌으로써 핵심 비지니스 로직에만
	집중할 수 있는 방법을 제공한다.

	보안이나 로그, 트랜잭션, 예외처리와 같이 비지니스 로직은 아니지만, 반드시 처리가
	필요한 부분을 횡단 관심사(cross-concern)이라고 한다.
	
	스프링 프레임워크는 이러한 횡단 관심사를 분리해서 제작하는 것이 가능하고
	횡단 관심사를 모듈로 분리하는 프로그래밍을 AOP라고 한다.

	이를 통해서 3가지의 이점이 생긴다.

	1) 핵심 비지니스 로직에만 집중하여 코드 개발
	2) 각 프로젝트마다 다른 관심사 적용 시 코드 수정 최소화
	3) 원하는 관심사의 유지보수가 수월한 코드 구성 가능

[트랜잭션의 지원]

	DB작업 시 트랜잭션 관리를 매번 상황에 맞게 코드로 작성하지 않고,
	어노테이션이나 XML로 트랜잭션 관리를 설정할 수 있다.

[단위 테스트]
	전체 Application을 실행하지 않아도 기능별 단위 테스트가 용이하기 때문에
	버그를 줄이고 개발 시간을 단축할 수 있다.

